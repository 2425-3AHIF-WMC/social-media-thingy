<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title><%= board.name %></title>
    <link rel="stylesheet" href="/style/main.css">
    <link rel="icon" type="image/x-icon" href="/images/favicon-04.svg">

    <style>
        /* ---------------------------
           Heart / Like button styles
           (You can copy these into main.css if you prefer)
           --------------------------- */
        .like-button {
            background: transparent;
            border: none;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            font-size: 0.9rem;
            color: #555;
        }
        .like-button .heart-icon {
            width: 20px;
            height: 20px;
            margin-right: 4px;
            fill: none;
            stroke: #555;
            stroke-width: 2px;
            transition: fill 0.2s, stroke 0.2s;
        }
        .like-button.liked .heart-icon {
            fill: #e74c3c;
            stroke: #e74c3c;
        }
        .like-count {
            min-width: 18px;
            text-align: right;
            display: inline-block;
        }
        /* Make sure each .post-card has space at the bottom
           so the heart button does not overlap the text */
        .post-card {
            position: relative;
            padding-bottom: 40px;
            margin-bottom: 1.5rem;
            border: 1px solid #e0e0e0;
            border-radius: 6px;
            padding: 1rem;
            background-color: #fff;
        }
        /* Position the heart‚Äêbutton at the bottom‚Äêright corner */
        .like-container {
            position: absolute;
            bottom: 16px;
            right: 16px;
        }
    </style>
</head>
<body>

<div class="header">
    <img src="/images/aegira.svg" alt="aegira" class="logo">
    <div class="home-buttons">
        <a href="/">Home</a>
        <a href="/discovery">Discovery</a>
        <a href="/feed">For you</a>
        <a href="/about-us">About us</a>
    </div>
    <div class="user-buttons">
        <% if (user && user.id) { %>
            <span>Logged in as: <%= user.username %></span>
            <a href="/dashboard">Dashboard</a>
            <a href="/logout">Logout</a>
        <% } else { %>
            <button><a href="/login">Log in</a></button>
            <button><a href="/register">Register</a></button>
        <% } %>
    </div>
</div>
<!-- END HEADER -->

<div class="profile-header-container">
    <img class="header-image" src="/<%= board.header_image %>" alt="Header Image"
         onerror="this.onerror=null;this.src='/uploads/default_header.png';">
    <img class="profile-image" src="/<%= board.profile_image %>" alt="Profile Image"
         onerror="this.onerror=null;this.src='/uploads/default_profile.png';">
</div>

<div class="board-content">
    <h1 class="board-Title"><%= board.name %></h1>
    <p class="board-description"><%= board.description %></p>
    <p class="board-owner">Owner: <%= ownerName %></p>
    <% if (currentUserId !== ownerId && !isMember) { %>
        <form action="/join/<%= board.id %>" method="POST">
            <button id="joinButton" type="submit">Join Board</button>
        </form>
    <% } %>
</div>

<div class="board-general">
    <div class="board-header">
        <div class="board-tabs">
            <button class="tab-button" onclick="openTab('posts')">Posts</button>
            <button class="tab-button" onclick="openTab('chat')">Chat</button>
            <button class="tab-button" onclick="openTab('source')">Source</button>
            <button class="tab-button" onclick="openTab('projects')">Projects</button>
        </div>
    </div>

    <!-- ===========================
         POSTS TAB
         =========================== -->
    <div id="posts" class="tab-content">
        <div>
            <h2>Posts</h2>
            <button id="openPostModalButton">Create a New Post</button>

            <% if (posts.length === 0) { %>
                <p>No posts yet. Be the first to post!</p>
            <% } else { %>
                <div class="posts-list">
                    <% posts.forEach(post => { %>
                        <div class="post-card">
                            <div class="post-header">
                                <img
                                        src="/<%= post.avatar || 'default_profile.png' %>"
                                        alt="<%= post.username %>'s avatar"
                                        class="post-avatar"
                                />
                                <strong class="post-username"><%= post.username %></strong>
                            </div>
                            <h3><%= post.title %></h3>

                            <% if (post.type === 'chapter') { %>
                                <p><%= post.content %></p>
                                <a href="/chapter/<%= post.id %>">üìñ Read Chapter</a>

                            <% } else if (post.type === 'comic') { %>
                                <p><%= post.content %></p>
                                <a href="/comic/<%= post.id %>">üéûÔ∏è Read Comic</a>

                            <% } else { %>
                                <p><%= post.content %></p>
                            <% } %>

                            <% if (post.type === 'image' && post.image) { %>
                                <img src="/<%= post.image %>" alt="Post Image" class="post-image"/>
                            <% } %>

                            <p class="post-meta">
                                Posted on <%= new Date(post.createdAt).toLocaleString() %>
                            </p>

                            <% if (post.hashtags.length) { %>
                                <div class="post-hashtags">
                                    <% post.hashtags.forEach(tag => { %>
                                        <span class="hashtag-item">#<%= tag %></span>
                                    <% }) %>
                                </div>
                            <% } %>

                            <!-- ====== LIKE BUTTON (HEART) ====== -->
                            <div class="like-container">
                                <button
                                        class="like-button <%= post.likedByCurrentUser ? 'liked' : '' %>"
                                        data-post-id="<%= post.id %>"
                                        aria-label="Like this post"
                                >
                                    <svg class="heart-icon" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M12 21s-8-6.686-8-11.333C4 6.707 6.686 4 10 4c1.657 0 3 1.343 3 3 0-1.657 1.343-3 3-3 3.314 0 6 2.707 6 5.667C20 14.314 12 21 12 21z"/>
                                    </svg>
                                    <span class="like-count"><%= post.likeCount || 0 %></span>
                                </button>
                            </div>
                            <!-- ====== END LIKE BUTTON ====== -->

                        </div> <% /* end .post-card */ %>
                    <% }) %>
                </div> <% /* end .posts-list */ %>
            <% } %>

            <!-- CREATE POST MODAL (unchanged from your original) -->
            <div>
                <div id="createPostModal" class="modal">
                    <div class="modal-content">
                        <span class="close-button" id="closePostModalButton">&times;</span>
                        <div class="create-post-container">
                            <h2>Create a New Post</h2>
                            <form id="createPostForm" enctype="multipart/form-data">
                                <label for="title">Title:</label>
                                <input type="text" id="title" name="title" required>

                                <label for="content">Content:</label>
                                <textarea id="content" name="content" required></textarea>

                                <label for="type">Type:</label>
                                <select id="type" name="type" required>
                                    <option value="text">Text</option>
                                    <option value="image">Image</option>
                                    <option value="chapter">Chapter (.txt/.docx/.pdf)</option>
                                    <option value="comic">Comic (multiple images)</option>
                                </select>

                                <div id="field-image" class="file-field">
                                    <label for="image">Image:</label>
                                    <input type="file" id="image" name="image" accept="image/*">
                                </div>

                                <div id="field-chapter" class="file-field" style="display:none;">
                                    <label for="chapterFile">Chapter File:</label>
                                    <input type="file" id="chapterFile" name="chapterFile" accept=".txt,.docx,.pdf">
                                </div>

                                <div id="field-comic" class="file-field" style="display:none;">
                                    <label for="comicPages">Comic Pages:</label>
                                    <input type="file" id="comicPages" name="comicPages" accept="image/*" multiple>
                                </div>

                                <label for="hashtagInput">Add Hashtags:</label>
                                <input type="text" id="hashtagInput" placeholder="Enter a hashtag">
                                <button type="button" id="addHashtagButton">Add Hashtag</button>
                                <div id="hashtagList"></div>
                                <input type="hidden" id="hashtags" name="hashtag">

                                <% if (isOwner) { %>
                                    <div id="projectField">
                                        <label for="projectId">Select Project:</label>
                                        <select id="projectId" name="projectId">
                                            <option value="">None</option>
                                        </select>
                                    </div>
                                <% } %>

                                <input type="hidden" id="boardId" name="boardId" value="<%= board.id %>">
                                <button type="submit">Create Post</button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
            <!-- END CREATE POST MODAL -->

        </div> <!-- end inner wrapper inside #posts -->

        <script>
            // ============================
            // Like‚Äê/Unlike Toggle Script
            // ============================
            document.addEventListener('DOMContentLoaded', () => {
                document.querySelectorAll('.like-button').forEach(btn => {
                    btn.addEventListener('click', async (e) => {
                        e.stopPropagation();
                        e.preventDefault();

                        const postId = btn.getAttribute('data-post-id');
                        if (!postId) return;

                        const isLiked = btn.classList.contains('liked');
                        const url = isLiked ? `/unlike/${postId}` : `/like/${postId}`;
                        const method = 'POST';

                        try {
                            const res = await fetch(url, {
                                method: 'POST',
                                credentials: 'same-origin'
                            })
                            if (res.status === 204) {
                                // Toggle UI immediately
                                const countSpan = btn.querySelector('.like-count');
                                let count = parseInt(countSpan.textContent, 10);
                                if (isLiked) {
                                    btn.classList.remove('liked');
                                    count = Math.max(0, count - 1);
                                } else {
                                    btn.classList.add('liked');
                                    count = count + 1;
                                }
                                countSpan.textContent = count;
                            } else {
                                console.error('Failed to toggle like:', res.status);
                            }
                        } catch (err) {
                            console.error('Error toggling like:', err);
                        }
                    });
                });
            });
        </script>

    </div> <!-- end #posts tab-content -->

    <!-- ===========================
         CHAT TAB (UNCHANGED)
         =========================== -->
    <div id="chat" class="tab-content" style="display:none;">
        <h2>Chat</h2>

        <div class="chat-flex-container">
            <div class="chat-main">
                <div id="chatWindow" class="chat-window"></div>
                <form id="chatForm" class="chat-form">
                    <input type="text" id="chatInput" class="chat-input" placeholder="Type your message‚Ä¶" required autocomplete="off" />
                    <button type="submit" class="chat-send-btn">Send</button>
                </form>
            </div>

            <aside class="chat-online-container">
                <h3>Online</h3>
                <ul id="onlineUsersList" class="online-list"></ul>
            </aside>
        </div>


        <script src="/socket.io/socket.io.js"></script>
        <script>
            (function() {
                const boardId = "<%= board.id %>";
                const currentUser = {
                    id: "<%= currentUserId %>",
                    username: '<%= user.username %>',
                    avatar: '<%= userAvatar %>'
                };
                const socket = io();

                socket.emit('joinBoard', boardId);
                socket.emit('registerUser', currentUser);

                const onlineList = document.getElementById('onlineUsersList');
                socket.on('onlineUsers', users => {
                    onlineList.innerHTML = '';
                    users.forEach(u => {
                        const li = document.createElement('li');
                        li.className = 'online-user';
                        li.innerHTML = `
                              <img src="/${u.avatar}" class="online-avatar" alt="${u.username}">
                              <span class="online-name">${u.username}</span>
                              <span class="role-badge ${u.role}">${u.role}</span>
                          `;
                        onlineList.appendChild(li);
                    });
                });

                function renderMessage(msg) {
                    const wrapper = document.createElement('div');
                    wrapper.classList.add('chat-message');
                    wrapper.innerHTML = `
        <img src="/${msg.avatar}" alt="${msg.username}" class="chat-avatar"/>
        <div class="chat-message-content">
          <div class="chat-message-header">
            <strong>${msg.username}</strong>
            <time>${new Date(msg.createdAt)
                        .toLocaleTimeString([], {hour:'2-digit', minute:'2-digit'})}</time>
          </div>
          <p class="chat-message-body">${msg.content}</p>
        </div>
      `;
                    document.getElementById('chatWindow').appendChild(wrapper);
                    document.getElementById('chatWindow').scrollTop = document.getElementById('chatWindow').scrollHeight;
                }

                fetch(`/chat/${boardId}/messages`)
                    .then(res => res.json())
                    .then(history => history.forEach(renderMessage))
                    .catch(console.error);

                socket.on('message', renderMessage);

                document.getElementById('chatForm').addEventListener('submit', e => {
                    e.preventDefault();
                    const content = document.getElementById('chatInput').value.trim();
                    if (!content) return;
                    socket.emit('newMessage', { boardId, content, user: currentUser });
                    document.getElementById('chatInput').value = '';
                });
            })();
        </script>
    </div>

    <!-- ===========================
         SOURCE TAB (UNCHANGED)
         =========================== -->
    <div id="source" class="tab-content" style="display:none;">
        <h2>Characters</h2>

        <div class="form-group">
            <label for="projectSelect">Select Project:</label>
            <select id="projectSelect">
                <option value="">-- choose project --</option>
                <% projects.forEach(prj => { %>
                    <option value="<%= prj.id %>"><%= prj.name %></option>
                <% }) %>
            </select>
        </div>

        <% if (isOwner) { %>
            <button id="openAddCharModal" class="btn" disabled>+ Add Character</button>
            <div id="addCharModal" class="modal">
                <div class="modal-content">
                    <span class="close-button" id="closeAddCharModal">&times;</span>
                    <h3>New Character</h3>
                    <form id="addCharForm" enctype="multipart/form-data">
                        <label>Name:</label>
                        <input type="text" name="name" required />
                        <label>Description:</label>
                        <textarea name="description"></textarea>
                        <label>Spoiler (optional):</label>
                        <textarea name="spoiler"></textarea>
                        <label>Image (optional):</label>
                        <input type="file" name="image" accept="image/*" />
                        <button type="submit">Save Character</button>
                    </form>
                </div>
            </div>
        <% } %>

        <div id="characterGallery"></div>

        <div id="characterModal">
            <div class="modal-content">
                <button class="close-btn" onclick="closeCharacterModal()">&times;</button>
                <div class="modal-images" id="modalImages"></div>
                <h3 id="modalName"></h3>
                <p><strong>Project:</strong> <span id="modalProject"></span></p>
                <p id="modalDesc"></p>
                <p id="modalSpoiler" style="font-style:italic; color:#f99;"></p>
            </div>
        </div>
    </div>

    <!-- ===========================
         PROJECTS TAB (UNCHANGED)
         =========================== -->
    <div id="projects" class="tab-content" style="display: none">
        <h2><%= isOwner ? "Your Projects" : "Projects" %></h2>

        <% if (isOwner) { %>
            <button id="openProjectModalButton" class="add-post-btn">Create a New Project</button>
        <% } %>

        <ul id="projectList" class="project-list">
            <% projects.forEach(prj => { %>
                <li
                        class="project-item"
                        data-id="<%= prj.id %>"
                        data-name="<%= prj.name.replace(/"/g,'&quot;') %>"
                        data-desc="<%= prj.description.replace(/"/g,'&quot;') %>"
                >

                    <div class="project-banner">
                        <%= prj.name.charAt(0).toUpperCase() %>
                    </div>
                    <div class="project-info">
                        <h4><%= prj.name %></h4>
                        <p><%= prj.description.length > 60 ? prj.description.slice(0, 57) + '...' : prj.description %></p>
                        <span class="view-project-btn">View</span>
                    </div>
                </li>
            <% }) %>
        </ul>

        <div id="projectModal" class="modal project-modal">
            <div class="modal-content">
                <span id="closeProjectModal" class="close-button">&times;</span>

                <div class="project-header">
                    <h3 id="projectName"></h3>
                    <p id="projectDesc"></p>
                </div>

                <div class="project-body">
                    <div id="projectPostsList" class="project-posts"></div>
                </div>
            </div>
        </div>
    </div>
</div> <!-- end .board-general -->

<script>
    document.addEventListener('DOMContentLoaded', () => {
        // 1) Tab‚Äêswitching logic
        function openTab(name) {
            document.querySelectorAll('.tab-content').forEach(div => div.style.display = 'none');
            document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
            document.getElementById(name).style.display = 'block';
            event.currentTarget.classList.add('active');

            if (name === 'source') {
                // (If you want to load characters lazily, you can do so here)
                // e.g. loadCharacterGallery();
            }
        }
        document.querySelectorAll('.tab-button').forEach(btn => {
            btn.addEventListener('click', () =>
                openTab(btn.getAttribute('onclick').match(/'(.+)'/)[1])
            );
        });
        // Open ‚ÄúPosts‚Äù tab by default
        document.querySelector('.tab-button').click();

        // 2) ‚ÄúCreate Post‚Äù modal logic (unchanged from your original file)
        const openPostModalButton = document.getElementById('openPostModalButton');
        const closePostModalButton = document.getElementById('closePostModalButton');
        const createPostModal = document.getElementById('createPostModal');
        const hashtagInput = document.getElementById('hashtagInput');
        const addHashtagButton = document.getElementById('addHashtagButton');
        const hashtagList = document.getElementById('hashtagList');
        const hashtagsField = document.getElementById('hashtags');
        const projectDropdown = document.getElementById('projectId');
        let hashtagsArr = [];

        if (projectDropdown) {
            fetch(`/board/<%= board.id %>/projects`)
                .then(res => res.json())
                .then(projects => {
                    projects.forEach(proj => {
                        const option = document.createElement('option');
                        option.value = proj.id;
                        option.textContent = proj.name;
                        projectDropdown.appendChild(option);
                    });
                })
                .catch(console.error);
        }

        openPostModalButton.addEventListener('click', () => {
            createPostModal.style.display = 'block';
        });
        closePostModalButton.addEventListener('click', () => {
            createPostModal.style.display = 'none';
        });
        window.addEventListener('click', (event) => {
            if (event.target === createPostModal) {
                createPostModal.style.display = 'none';
            }
        });

        addHashtagButton.addEventListener('click', () => {
            const tag = hashtagInput.value.trim();
            if (tag && !hashtagsArr.includes(tag)) {
                hashtagsArr.push(tag);
                updateHashtagList();
                hashtagInput.value = '';
            }
        });
        function updateHashtagList() {
            hashtagList.innerHTML = '';
            hashtagsArr.forEach((t, idx) => {
                const span = document.createElement('span');
                span.textContent = `#${t}`;
                span.className = 'hashtag-item';
                const removeBtn = document.createElement('button');
                removeBtn.textContent = 'x';
                removeBtn.className = 'remove-hashtag';
                removeBtn.addEventListener('click', () => {
                    hashtagsArr.splice(idx, 1);
                    updateHashtagList();
                });
                span.appendChild(removeBtn);
                hashtagList.appendChild(span);
            });
            hashtagsField.value = hashtagsArr.join(',');
        }

        document.getElementById('createPostForm').addEventListener('submit', async (event) => {
            event.preventDefault();
            const form = event.target;
            const formData = new FormData(form);
            formData.set('hashtags', hashtagsArr.join(','));
            try {
                const response = await fetch('/createPost', { method: 'POST', body: formData });
                if (response.ok) {
                    alert('Post created successfully!');
                    window.location.reload();
                } else {
                    const errorData = await response.json();
                    alert(`Error: ${errorData.error || 'Failed to create post'}`);
                }
            } catch (error) {
                console.error(error);
                alert('An error occurred while creating the post.');
            }
        });

        // 3) ‚ÄúChat‚Äù tab scripts (unchanged)
        // ‚Ä¶ your existing chat‚Äêrelated JS is already above ‚Ä¶

        // 4) ‚ÄúSource‚Äù tab scripts (unchanged)
        // ‚Ä¶ your existing ‚ÄúSource‚Äù logic is above ‚Ä¶

        // 5) ‚ÄúProjects‚Äù tab scripts (unchanged)
        // ‚Ä¶ your existing ‚ÄúProjects‚Äù logic is above ‚Ä¶
    });
</script>
</body>
</html>
