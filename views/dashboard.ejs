<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Dashboard</title>
    <link rel="icon" type="image/x-icon" href="/images/favicon-04.svg">
    <link rel="stylesheet" href="/style/main.css">
</head>
<body>

<div class="header">
    <img src="/images/aegira.svg" alt="aegira" class="logo">
    <div class="home-buttons">
        <a href="/">Home</a>
        <a href ="/discovery">Discovery</a>
        <a href="/events">Events</a>
        <a href="/feed">For you</a>
        <a href="/about-us">About us</a>
    </div>
    <div class="user-buttons">
        <button id="login-button"><a href="/login">Log in</a></button>
        <button id="register-button"><a href="/register">Register</a></button>
        <span id="username"></span>
        <span id="dashboard-button"></span>
        <span id="logout-button"></span>
    </div>
</div>


<!-- Dashboard-specific content -->
<div class="profile-header-container">
    <!-- Add onerror fallback for user header image -->
    <img
            id="userheaderImage"
            class="header-image"
            src="<%= userHeaderImage %>"
            alt="Header Image"
            onerror="this.onerror=null;this.src='/uploads/default_header.png';"
    >
    <!-- Add onerror fallback for user profile image -->
    <img
            id="userprofileImage"
            class="profile-image"
            src="<%= userProfileImage %>"
            alt="Profile Image"
            onerror="this.onerror=null;this.src='/uploads/default_profile.png';"
    >

    <input type="file" id="profileImageInput" style="display: none;">
    <input type="file" id="headerImageInput" style="display: none;">
</div>

<div class="user-profile-infos">
    <div class="profile-info">
        <span class="label">Username:</span>
        <span id="fetchUsername" class="editable-box" contenteditable="false"><%= user.username %></span>
    </div>
    <div class="profile-info">
        <span class="label">Bio:</span>
        <span id="fetchBio" class="editable-box" contenteditable="true"><%= user.bio %></span>
    </div>
    <div class="profile-info">
        <span class="label">Email:</span>
        <span id="fetchEmail" class="editable-box" contenteditable="false"><%= user.email %></span>
    </div>
    <div class="profile-info">
        <span class="label">Role:</span>
        <span id="fetchRole" class="editable-box" contenteditable="false"><%= user.role %></span>
    </div>
    <div class="profile-info">
        <span class="label">Pronouns:</span>
        <span id="fetchPronouns" class="editable-box" contenteditable="true"><%= user.pronouns %></span>
    </div>
    <div class="profile-info">
        <span class="label">Links:</span>
        <span id="fetchLinks" class="editable-box" contenteditable="true"><%= user.links %></span>
    </div>
    <div class="profile-info">
        <span class="label">Badges:</span>
        <span id="fetchBadges" class="editable-box-badge" contenteditable="false"><%= user.badges %></span>
    </div>
    <!-- Here's the Save button to update fields at once -->
    <button id="saveProfileButton">Save Changes</button>
</div>

<div class="your-boards-container">
    <h2>Boards</h2>
    <button id="openModalButton">Create a New Board</button>
    <div>
        <div id="createBoardModal" class="modal">
            <div class="modal-content">
                <span class="close-button" id="closeModalButton">&times;</span>
                <div class="create-board-container">
                    <h2>Create a New Board</h2>
                    <form id="createBoardForm" enctype="multipart/form-data">
                        <label for="name">Board Name:</label>
                        <input type="text" id="name" name="name" required>

                        <label for="description">Description:</label>
                        <textarea id="description" name="description" required></textarea>

                        <label for="visibility">Visibility:</label>
                        <select id="visibility" name="visibility" required>
                            <option value="public">Public</option>
                            <option value="private">Private</option>
                        </select>

                        <label for="boardTypeId">Board Type ID:</label>
                        <input type="number" id="boardTypeId" name="boardTypeId" required>

                        <label for="profileImage">Profile Image:</label>
                        <input type="file" id="profileImage" name="profileImage" accept="image/*">

                        <label for="headerImage">Header Image:</label>
                        <input type="file" id="headerImage" name="headerImage" accept="image/*">

                        <!-- Hashtag Input -->
                        <label for="hashtagInput">Add Hashtags:</label>
                        <input type="text" id="hashtagInput" placeholder="Enter a hashtag">
                        <button type="button" id="addHashtagButton">Add Hashtag</button>

                        <!-- Display Added Hashtags -->
                        <div id="hashtagList"></div>

                        <!-- Hidden Input to Store Hashtags -->
                        <input type="hidden" id="hashtags" name="hashtag">

                        <button type="submit">Create Board</button>
                    </form>
                </div>
            </div>
        </div>

        <script>
            document.addEventListener('DOMContentLoaded', () => {
                const hashtagInput = document.getElementById('hashtagInput');
                const addHashtagButton = document.getElementById('addHashtagButton');
                const hashtagList = document.getElementById('hashtagList');
                const hashtagsField = document.getElementById('hashtags');
                let hashtags = [];

                // Add hashtag to the list
                addHashtagButton.addEventListener('click', () => {
                    const hashtag = hashtagInput.value.trim();
                    if (hashtag && !hashtags.includes(hashtag)) {
                        hashtags.push(hashtag);
                        updateHashtagList();
                        hashtagInput.value = '';
                    }
                });

                // Update the displayed hashtag list
                function updateHashtagList() {
                    hashtagList.innerHTML = '';
                    hashtags.forEach((tag, index) => {
                        const tagElement = document.createElement('span');
                        tagElement.textContent = `#${tag}`;
                        tagElement.className = 'hashtag-item';

                        // Add a remove button for each hashtag
                        const removeButton = document.createElement('button');
                        removeButton.textContent = 'x';
                        removeButton.className = 'remove-hashtag';
                        removeButton.addEventListener('click', () => {
                            hashtags.splice(index, 1);
                            updateHashtagList();
                        });

                        tagElement.appendChild(removeButton);
                        hashtagList.appendChild(tagElement);
                    });

                    hashtagsField.value = hashtags.join(',');
                }

                // Handle form submission
                document.getElementById('createBoardForm').addEventListener('submit', async (event) => {
                    event.preventDefault();

                    const form = event.target;
                    const formData = new FormData(form);

                    // Add hashtags to the form data
                    formData.set('hashtag', hashtags.join(','));

                    try {
                        const response = await fetch('/createBoard', {
                            method: 'POST',
                            body: formData
                        });

                        if (response.ok) {
                            alert('Board created successfully!');
                            window.location.reload(); // Reload or redirect to the new board
                        } else {
                            const errorData = await response.json();
                            alert(`Error: ${errorData.error || 'Failed to create board'}`);
                        }
                    } catch (error) {
                        console.error('Error creating board:', error);
                        alert('An error occurred while creating the board.');
                    }
                });
            });

            document.addEventListener('DOMContentLoaded', () => {
                const openModalButton = document.getElementById('openModalButton');
                const closeModalButton = document.getElementById('closeModalButton');
                const createBoardModal = document.getElementById('createBoardModal');

                // Open the modal
                openModalButton.addEventListener('click', () => {
                    createBoardModal.style.display = 'block';
                });

                // Close the modal
                closeModalButton.addEventListener('click', () => {
                    createBoardModal.style.display = 'none';
                });

                // Close the modal when clicking outside the modal content
                window.addEventListener('click', (event) => {
                    if (event.target === createBoardModal) {
                        createBoardModal.style.display = 'none';
                    }
                });
            });
        </script>


    </div>
    <div id="userBoardList">
        <% boards.forEach(board => { %>
            <div class="board-item" data-board-id="<%= board.id %>">
                <div class="header-container">
                    <img src="/<%= board.header_image %>" alt="<%= board.name %> header" class="header-image" onerror="this.onerror=null;this.src='/uploads/default_header.png';" />
                    <img src="/<%= board.profile_image %>" alt="<%= board.name %> profile" class="profile-image" onerror="this.onerror=null;this.src='/uploads/default_profile.png';" />
                </div>
                <h2><%= board.name %></h2>
                <p><%= board.description %></p>
                <a href="/board/<%= board.id %>" target="_self">Open Board</a>
            </div>
        <% }) %>
    </div>
</div>


<div class="online-users">
    <h3>Online users</h3>
    <ul id="onlineUsers">
        <% onlineUsers.forEach(onlineUser => { %>
            <li><%= onlineUser %></li>
        <% }) %>
    </ul>
</div>

<button><a href="/home">home</a></button>
<button><a href="/logout">logout</a></button>
<button id="adminButton" style="display: <%= user.role === 'admin' ? 'block' : 'none' %>;">
    <a href="/admin">Admin Dashboard</a>
</button>
<!-- Fix scripts after some while i really got no fucking clue what happened here -->
<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Make the profile image clickable -> triggers file input
        const profileImageEl = document.getElementById('userprofileImage');
        const headerImageEl  = document.getElementById('userheaderImage');

        profileImageEl.addEventListener('click', () => {
            document.getElementById('profileImageInput').click();
        });

        headerImageEl.addEventListener('click', () => {
            document.getElementById('headerImageInput').click();
        });

        // If you have the old code for updating images via fetch:
        document.getElementById('profileImageInput').addEventListener('change', async (event) => {
            const file = event.target.files[0];
            if (file) {
                const formData = new FormData();
                formData.append('avatar', file);

                try {
                    const response = await fetch('/update-user-avatar', {
                        method: 'POST',
                        body: formData
                    });
                    if (response.ok) {
                        location.reload();
                    } else {
                        console.error('Error updating profile image');
                    }
                } catch (error) {
                    console.error('Error updating profile image:', error);
                }
            }
        });

        document.getElementById('headerImageInput').addEventListener('change', async (event) => {
            const file = event.target.files[0];
            if (file) {
                const formData = new FormData();
                formData.append('header', file);

                try {
                    const response = await fetch('/update-user-header', {
                        method: 'POST',
                        body: formData
                    });
                    if (response.ok) {
                        location.reload();
                    } else {
                        console.error('Error updating header image');
                    }
                } catch (error) {
                    console.error('Error updating header image:', error);
                }
            }
        });

        // ... the rest of dashboard JS (hashtags, board creation, etc.) ...
    });
    document.addEventListener('DOMContentLoaded', () => {
        fetch('/username')
            .then(response => response.json())
            .then(data => {
                if (data.username) {
                    document.getElementById('username').textContent = `Logged in as: ${data.username}`;
                    document.getElementById('logout-button').innerHTML = `<a href="/logout">Logout</a>`;
                    document.getElementById('login-button').style.display = 'none';
                    document.getElementById('register-button').style.display = 'none';
                }
            });
    });
    document.addEventListener('DOMContentLoaded', () => {
        // "Save Changes" updates all fields in one request
        document.getElementById('saveProfileButton').addEventListener('click', async () => {
            const bio = document.getElementById('fetchBio').textContent.trim();
            const pronouns = document.getElementById('fetchPronouns').textContent.trim();
            const links = document.getElementById('fetchLinks').textContent.trim();
            const badges = document.getElementById('fetchBadges').textContent.trim();

            try {
                const response = await fetch('/update-user', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ bio, pronouns, links, badges })
                });

                if (response.ok) {
                    alert('Profile updated successfully!');
                    // Optionally reload the page:
                    // location.reload();
                } else {
                    console.error('Failed to update user fields.');
                }
            } catch (error) {
                console.error('Error updating user fields:', error);
            }
        });
    });
</script>

</body>
</html>
