<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Dashboard</title>
    <link rel="icon" type="image/x-icon" href="https://i.postimg.cc/fL9NL4F6/logo.png">
    <link rel="stylesheet" href="/style/style.css">
</head>
<body>
<div class="header">
    <div class="home-buttons">
        <a href="/">Home</a>
        <a href="/discovery">Discovery</a>
        <a href="/events">Events</a>
        <a href="/rnd">Free Space</a>
        <a href="/about-us">About us</a>
    </div>
    <div class="user-buttons">
        <span id="username"><%= user.username %></span>
        <span id="dashboard-button"></span>
        <span id="logout-button"></span>
    </div>
</div>
<div class="profile-header-container">
    <img id="userheaderImage" class="header-image" src="<%= userHeaderImage %>" alt="Header Image">
    <img id="userprofileImage" class="profile-image" src="<%= userProfileImage %>" alt="Profile Image">
    <input type="file" id="profileImageInput" style="display: none;">
    <input type="file" id="headerImageInput" style="display: none;">
</div>
<div class="user-profile-infos">
    <div class="profile-info"><span class="label">Username:</span> <span id="fetchUsername" class="editable-box" contenteditable="false"><%= user.username %></span></div>
    <div class="profile-info"><span class="label">Bio:</span> <span id="fetchBio" class="editable-box" contenteditable="true"><%= user.bio %></span></div>
    <div class="profile-info"><span class="label">Email:</span> <span id="fetchEmail" class="editable-box" contenteditable="false"><%= user.email %></span></div>
    <div class="profile-info"><span class="label">Role:</span> <span id="fetchRole" class="editable-box" contenteditable="false"><%= user.role %></span></div>
    <div class="profile-info"><span class="label">Pronouns:</span> <span id="fetchPronouns" class="editable-box" contenteditable="true"><%= user.pronouns %></span></div>
    <div class="profile-info"><span class="label">Links:</span> <span id="fetchLinks" class="editable-box" contenteditable="true"><%= user.links %></span></div>
    <div class="profile-info"><span class="label">Badges:</span> <span id="fetchBadges" class="editable-box" contenteditable="false"><%= user.badges %></span></div>
</div>

<div>
    <h2>Boards</h2>
    <div id="userBoardList">
        <% boards.forEach(board => { %>
            <div class="board-item" data-board-id="<%= board.id %>">
                <div class="header-container">
                    <img src="/<%= board.header_image %>" alt="<%= board.name %> header" class="header-image" onerror="this.onerror=null;this.src='/uploads/default_header.png';" />
                    <img src="/<%= board.profile_image %>" alt="<%= board.name %> profile" class="profile-image" onerror="this.onerror=null;this.src='/uploads/default_profile.png';" />
                </div>
                <h2><%= board.name %></h2>
                <p><%= board.description %></p>
                <a href="/board/<%= board.id %>" target="_self">Open Board</a>
            </div>
        <% }) %>
    </div>
</div>

<div>
    <h2>Create Board</h2>
    <form id="createBoardForm">
        <label for="boardName">Name:</label>
        <input type="text" id="boardName" name="name" required>
        <br>
        <label for="boardType">Board Type:</label>
        <select id="boardType" name="boardType">
            <option value="public">Public</option>
            <option value="private">Private</option>
        </select>
        <br>
        <label for="boardDescription">Description:</label>
        <input type="text" id="boardDescription" name="description" required>
        <br>
        <label for="profileImage">Profile Image:</label>
        <input type="file" id="profileImage" name="profileImage">
        <br>
        <label for="headerImage">Header Image:</label>
        <input type="file" id="headerImage" name="headerImage">
        <br>
        <button type="submit">Create Board</button>
        <label for="boardHashtags">Hashtags:</label>
        <input type="text" id="boardHashtags" name="hashtags">
        <button type="button" id="addHashtagButton">Add Hashtag</button>
        <div id="hashtagList"></div>
    </form>
</div>
<div class="online-users">
    <h3>Online users</h3>
    <ul id="onlineUsers">
        <% onlineUsers.forEach(user => { %>
            <li><%= user %></li>
        <% }) %>
    </ul>
</div>

<button><a href="/home">home</a></button>
<button><a href="/logout">logout</a></button>
<button id="adminButton" style="display: <%= user.role === 'admin' ? 'block' : 'none' %>;"><a href="/admin">Admin Dashboard</a></button>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        let hashtagsSet = new Set();
        document.getElementById('userprofileImage').addEventListener('click', () => {
            document.getElementById('profileImageInput').click();
        });

        document.getElementById('userheaderImage').addEventListener('click', () => {
            document.getElementById('headerImageInput').click();
        });

        document.getElementById('profileImageInput').addEventListener('change', async (event) => {
            const file = event.target.files[0];
            if (file) {
                const formData = new FormData();
                formData.append('avatar', file);

                try {
                    const response = await fetch('/update-user-avatar', {
                        method: 'POST',
                        body: formData
                    });

                    if (response.ok) {
                        location.reload();
                    } else {
                        console.error('Error updating profile image');
                    }
                } catch (error) {
                    console.error('Error updating profile image:', error);
                }
            }
        });

        document.getElementById('headerImageInput').addEventListener('change', async (event) => {
            const file = event.target.files[0];
            if (file) {
                const formData = new FormData();
                formData.append('header', file);

                try {
                    const response = await fetch('/update-user-header', {
                        method: 'POST',
                        body: formData
                    });

                    if (response.ok) {
                        location.reload();
                    } else {
                        console.error('Error updating header image');
                    }
                } catch (error) {
                    console.error('Error updating header image:', error);
                }
            }
        });

        document.getElementById("addHashtagButton").addEventListener("click", () => {
            const hashtagInput = document.getElementById("boardHashtags");
            let tag = hashtagInput.value.trim();

            if (!tag || hashtagsSet.has(tag)) return;

            if (hashtagsSet.size >= 5) {
                alert("You can only add up to 5 hashtags.");
                document.getElementById("addHashtagButton").disabled = true;
                return;
            }

            hashtagsSet.add(tag);
            updateHashtagDisplay();
            hashtagInput.value = "";

            if (hashtagsSet.size >= 5) {
                document.getElementById("addHashtagButton").disabled = true;
            }
        });

        function updateHashtagDisplay() {
            const hashtagList = document.getElementById("hashtagList");
            hashtagList.innerHTML = "";
            hashtagsSet.forEach(tag => {
                const span = document.createElement("span");
                span.textContent = `#${tag} `;
                hashtagList.appendChild(span);
            });
        }

        document.getElementById("createBoardForm").addEventListener("submit", async (event) => {
            event.preventDefault();

            const name = document.getElementById('boardName').value.trim();
            const description = document.getElementById('boardDescription').value.trim();
            const boardType = document.getElementById('boardType').value;

            if (!name || !description) {
                alert("Name and description are required!");
                return;
            }

            const formData = new FormData();
            formData.append('name', name);
            formData.append('description', description);
            formData.append('visibility', boardType);

            const hashtagsArray = Array.from(hashtagsSet).slice(0, 5);
            if (hashtagsArray.length > 0) {
                formData.append("hashtags", JSON.stringify(hashtagsArray));
            }

            const profileImage = document.getElementById('profileImage').files[0];
            if (profileImage) {
                formData.append('profileImage', profileImage);
            }

            const headerImage = document.getElementById('headerImage').files[0];
            if (headerImage) {
                formData.append('headerImage', headerImage);
            }

            try {
                const response = await fetch('/create', {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    hashtagsSet.clear();
                    updateHashtagDisplay();
                    document.getElementById("createBoardForm").reset();
                } else {
                    alert(`Error: ${await response.text()}`);
                }
            } catch (error) {
                console.error("Error creating board:", error);
                alert("Failed to create board. Please try again.");
            }
        });
    });
</script>
</body>
</html>